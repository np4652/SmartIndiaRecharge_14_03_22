@using Microsoft.AspNetCore.Http
@using Fintech.AppCode.Configuration;
@using Fintech.AppCode.StaticModel;
@using RoundpayFinTech.AppCode.Model.ProcModel;
@inject IHttpContextAccessor HttpContextAccessor
@model RoundpayFinTech.AppCode.Model.ProcModel.ServicesPM

@{
    var list = new SelectList(Model.Detail, "OID", "Name");
}
@{
    SellerDashboard sellerDashboard = HttpContextAccessor.HttpContext.Session.GetObjectFromJson<SellerDashboard>
    (SessionKeys.Service);
    var _model = sellerDashboard.PackageCl;
    var service_name = _model.Where(d => d.ServiceID == Model.OPType).Select(x => x.Name).ToList()[0];


}
<link href="~/css/Common/icheck-bootstrap.css" rel="stylesheet" />
<style>
    .anclnk a {
        color: #007bff
    }
</style>

<div class="card-header mb-1" style="background:#fff;">
    <div class="row">
        <div class="col-lg-8 col-md-8 col-sm-8">
            <label class="text-bingo">@service_name</label><br>
            @*<small>Tell us your number and we will figure out the rest</small>*@
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="float-right">
                <input type="hidden" id="hidReferenceID" />
            </div>
        </div>
    </div>
</div>
@if (@Model.OPType == OPTypes.LoanServiceLead)
{

    var OID = Model.Detail.Where(s => s.OpType == Model.OPType).Select(s => s.OID).ToList()[0];

    <input type="hidden" id="OID" value="@OID" />
    <div class="card-body service-card">
        <div class="form-group">

            @Html.Label("txtName", "Name", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtName", null, new { @class = "form-control text-capitalize", @tabindex = 1, @placeholder = "Customer Name", @aria_describedby = "NameHelp" })
            <small id="NameHelp" class="form-text text-danger  d-none">Invalid Name</small>
        </div>
        <div class="form-group">

            @Html.Label("txtMobileNo", "MobileNo", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtMobileNo", null, new { @class = "form-control text-capitalize", @tabindex = 2, @placeholder = "Customer Mobile No.", @aria_describedby = "MobileHelp" })
            <small id="MobileHelp" class="form-text text-danger  d-none">Invalid Mobile</small>
        </div>

        <div class="form-group">

            @Html.Label("txtEmail", "Email", new { @class = "lbl" })
            @Html.TextBox("txtEmail", null, new { @class = "form-control text-capitalize", @tabindex = 3, @placeholder = "Customer Email..", @aria_describedby = "EmailHelp" })
            <small id="EmailHelp" class="form-text text-danger"></small>
        </div>
        <div class="form-group">

            @Html.Label("txtPan", "PAN", new { @class = "lbl" })
            @Html.TextBox("txtPan", null, new { @class = "form-control text-capitalize", @tabindex = 4, @placeholder = "Customer PAN Number.." })

        </div>
        <div class="form-group">
            @*@{
                    var LoanTypelst = new SelectList(Model.LoanTypelist, "ID", "LoanType");
                }*@
            <label class="lbl">Loan Type</label>
            <div class="form-control" tabindex="5">
                @if (Model.loanTypes != null)
                {
                    foreach (var item in Model.loanTypes)
                    {
                        <label for="rbnLoanType_@item.ID" name="rbnLoanType_@item.ID"> <input type="checkbox" class="clsLoanType" value="@item.ID" id="rbnLoanType_@item.ID" name="rbnLoanType_@item.ID" data-name="@item.LoanType" />&nbsp;&nbsp;<strong>@item.LoanType</strong>&nbsp;&nbsp;</label>
                    }
                }

            </div>
        </div>



        <div class="form-group">

            @Html.Label("txtAmount", "Amount", new { @class = "lbl" })
            @Html.TextBox("txtAmount", "0.00", new { @class = "form-control text-capitalize", @placeholder = "Loan Amount..", @tabindex = 6 })
            <small id="AmountHelp" class="form-text text-danger"></small>
        </div>
        <div class="form-group">
            <label>Type Of Customer</label>
            <div class="form-control" tabindex="7">
                @if (Model.customerTypes != null)
                {
                    foreach (var item in Model.customerTypes)
                    {
                        <label for="rbnCusType_@item.ID" name="rbnCusType_@item.ID"><input type="checkbox" value="@item.ID" id="rbnCusType_@item.ID" name="rbnCusType_@item.ID" class="clsCustomerType" />&nbsp;&nbsp;<strong>@item.CustomerType</strong>&nbsp;&nbsp;</label>
                    }
                }
            </div>
        </div>
        <div class="form-group">

            @Html.Label("txtComments", "Comments", new { @class = "lbl" })
            @Html.TextArea("txtComments", null, new { @class = "form-control text-capitalize", @tabindex = 8 })

        </div>
        <div class="form-group">
            <button class="btn btn-outline-dark" id="btnSubmit" onclick="SaveLoanServiceLead()" tabindex="9">Submit</button>
            <button class="btn btn-dark" id="btnClear" onclick="ClearLoanServiceLead()" tabindex="10">Clear</button>

        </div>
    </div>
}
else if (@Model.OPType == OPTypes.InsuranceLead)
{
    var OID = Model.Detail.Where(s => s.OpType == Model.OPType).Select(s => s.OID).ToList()[0];
    <input type="hidden" id="OID" value="@OID" />
    <div class="card-body service-card">
        <div class="form-group">

            @Html.Label("txtName", "Name", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtName", null, new { @class = "form-control text-capitalize", @tabindex = 1, @placeholder = "Customer Name", @aria_describedby = "NameHelp" })
            <small id="NameHelp" class="form-text text-danger  d-none">Invalid Name</small>
        </div>
        <div class="form-group">

            @Html.Label("txtMobileNo", "MobileNo", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtMobileNo", null, new { @class = "form-control text-capitalize", @tabindex = 2, @placeholder = "Customer Mobile No.", @aria_describedby = "MobileHelp" })
            <small id="MobileHelp" class="form-text text-danger  d-none">Invalid Mobile</small>
        </div>

        <div class="form-group">

            @Html.Label("txtAge", "Age", new { @class = "lbl" })
            @Html.TextBox("txtAge", "0", new { @class = "form-control text-capitalize", @tabindex = 3, @placeholder = "Customer Age.." })
            <small id="AgeHelp" class="form-text text-danger"></small>
        </div>

        <div class="form-group">
            @*@{
                    var LoanTypelst = new SelectList(Model.LoanTypelist, "ID", "LoanType");
                }*@
            <label class="lbl">Insurance Type</label>
            <div class="form-control" tabindex="4">
                @if (Model.insuranceTypes != null)
                {
                    foreach (var item in Model.insuranceTypes)
                    {
                        <label for="rbnIncType_@item.ID"><input type="checkbox" class="clsInsuranceType" value="@item.ID" id="rbnIncType_@item.ID" name="rbnIncType_@item.ID" />&nbsp;&nbsp;<strong>@item.InsuranceType</strong>&nbsp;&nbsp;</label>
                    }
                }
            </div>
        </div>
        <br>
        <div class="form-group">
            @Html.Label("txtAmount", "Sum Insured", new { @class = "lbl" })
            @Html.TextBox("txtAmount", "0.00", new { @class = "form-control text-capitalize", @placeholder = "Amount..", @tabindex = 5 })
            <small id="AmountHelp" class="form-text text-danger"></small>
        </div>
        <div class="form-group">
            <label>Required For</label>
            <div class="form-control" tabindex="6">
                <label for="rbnSelf"><input type="checkbox" class="clsRequiredFor" value="Self" id="chkRequiedFor" name="chkRequiedFor" />&nbsp;&nbsp;<strong>Self</strong></label>&nbsp;&nbsp;
                <label><input type="checkbox" value="Family Floater" class="clsRequiredFor" id="chkRequiedFor" name="chkRequiedFor" />&nbsp;&nbsp;<strong>Family Floater</strong></label>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("txtComments", "Comments", new { @class = "lbl" })
            @Html.TextArea("txtComments", null, new { @class = "form-control text-capitalize", @tabindex = 7 })
        </div>
        <div class="form-group">
            <button class="btn btn-outline-dark" id="btnSubmit" onclick="SaveInsuranceServiceLead()" tabindex="8">Submit</button>
            <button class="btn btn-dark" id="btnSubmit" onclick="ClearInsuranceServiceLead()" tabindex="9">Clear</button>
        </div>
    </div>
}
else if (@Model.OPType == OPTypes.CreditCardLead)
{
    var OID = Model.Detail.Where(s => s.OpType == Model.OPType).Select(s => s.OID).ToList()[0];
    <input type="hidden" id="OID" value="@OID" />
    <div class="card-body service-card">
        <div class="form-group">

            @Html.Label("txtName", "Name", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtName", null, new { @class = "form-control text-capitalize", @tabindex = 1, @placeholder = "Customer Name", @aria_describedby = "NameHelp" })
            <small id="NameHelp" class="form-text text-danger  d-none">Invalid Name</small>
        </div>
        <div class="form-group">

            @Html.Label("txtMobileNo", "MobileNo", new { @class = "lbl" })&nbsp;<code><strong>*</strong></code>
            @Html.TextBox("txtMobileNo", null, new { @class = "form-control text-capitalize", @tabindex = 2, @placeholder = "Customer Mobile No.", @aria_describedby = "MobileHelp" })
            <small id="MobileHelp" class="form-text text-danger  d-none">Invalid Mobile</small>
        </div>
        <div class="form-group">

            @Html.Label("txtAge", "Age", new { @class = "lbl" })
            @Html.TextBox("txtAge", "0", new { @class = "form-control text-capitalize", @tabindex = 3, @placeholder = "Customer Age.." })
            <small id="AgeHelp" class="form-text text-danger"></small>
        </div>
        <div class="form-group">
            <label class="lbl">Occupation Type</label>
            <select id="ddlOccupationType" name="ddlOccupationType" class="form-control">
                <option value="">:: Select ::</option>
                <option value="Salaried">Salaried</option>
                <option value="Self Employed Professional">Self Employed Professional</option>
                <option value="Self Employed Business">Self Employed Business</option>
            </select>
        </div>
        <div class="form-group">
            @Html.Label("txtAmount", "Monthly Income", new { @class = "lbl" })
            @Html.TextBox("txtAmount", "0.00", new { @class = "form-control", @placeholder = "Monthly Income", @tabindex = 4 })
            <small id="IncomeHelp" class="form-text text-danger"></small>
        </div>
        <div class="form-group">

            @Html.Label("txtPinCode", "Pin Code", new { @class = "lbl" })
            @Html.TextBox("txtPinCode", null, new { @class = "form-control", @placeholder = "Pin Code", @tabindex = 5 })
            <small id="IncomeHelp" class="form-text text-danger"></small>
        </div>
        <label class="lbl">
            Do you have any credit card(s)?
        </label>
        <select id="ddlBank" name="ddlBank" class="form-control">
            <option value="0">:: Select any/all banks ::</option>
            @if (Model.bankMasters != null)
            {
                foreach (var item in Model.bankMasters)
                {
                    <option value="@item.ID">@item.BankName</option>
                }
            }
        </select>
        <div class="form-group">
            <label>Do you have any active loan(s)?</label>
            <div class="form-control" tabindex="6">
                <label for="chkActiveLoan"> <input type="checkbox" value="1" id="chkActiveLoanYes" class="clsActiveLoan" name="chkActiveLoan" />&nbsp;&nbsp;<strong>Yes</strong></label>&nbsp;&nbsp;
                <label for="chkActiveLoan"><input type="checkbox" value="0" id="chkActiveLoanNo" class="clsActiveLoan" name="chkActiveLoan" checked />&nbsp;&nbsp;<strong>No</strong></label>
            </div>
        </div>
        <div class="form-group">
            @Html.Label("txtComments", "Comments", new { @class = "lbl" })
            @Html.TextArea("txtComments", null, new { @class = "form-control text-capitalize", @tabindex = 7 })
        </div>
        <div class="form-group">
            <button class="btn btn-outline-dark" id="btnSubmit" onclick="SaveCreditCardLead()" tabindex="8">Submit</button>
            <button class="btn btn-dark" id="btnSubmit" onclick="ClearCreditCardLead()" tabindex="9">Clear</button>
        </div>
    </div>
}
<script>
    function SaveLoanServiceLead() {
        //debugger;
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"), email: $("#txtEmail"), pan: $("#txtPan"),
            LoanAmount: $("#txtAmount"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }

        var len = 10, maxlength = 12;

        var validateMob = $v.$IsMob(ct.mob.val())

        var IsE = {
            name: ((ct.name.val() === null || ct.name.val() == "") || ct.name.val().length > 100 || $v.$numOnly(ct.name.val()) == ct.name.val()),
            mob: !validateMob

        }
        $v.showErrorFor(ct.name, "Customer Name is required or Please required valid Name", IsE.name);
        $v.showErrorFor(ct.mob, "Customer Mobile No. is required and length must be " + " " + len + " " + "digits", IsE.mob);

        IsE.err = (IsE.name || IsE.mob)
        if (IsE.err) {
            btnLdr.Stop(ct.btn);
            return false;
        }

        var LoanLeadServiceObj = {
            Name: ct.name.val(),
            Mobile: ct.mob.val(),
            Email: ct.email.val(),
            PAN: ct.pan.val(),
            LoanTypeID: $(".clsLoanType:checked").val(),
            Amount: parseFloat(ct.LoanAmount.val()),
            CustomerTypeID: $(".clsCustomerType:checked").val(),
            Comments: ct.Comments.val(),
            OID: $("#OID").val()
        }
        if (isNaN(LoanLeadServiceObj.Amount)) {
            an.title = "failed",
                an.content = "Invalid amount",
                an.alert(an.type.failed);
            return false;
        }
        //console.log(LoanLeadServiceObj)
        if (LoanLeadServiceObj != null) {
            preloader.load();
            var req = LoanLeadServiceObj;
            $.ajax({
                type: "POST",
                url: "/SaveLeadService",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify(req),
                success: function (result) {

                    if (result.statuscode == 1) {
                        an.title = result.msg,
                            an.content = "Loan Service Lead Saved Successfully",
                            an.alert(an.type.success);
                        ClearLoanServiceLead();
                    }
                    else {
                        an.title = "failed",
                            an.content = result.msg,
                            an.alert(an.type.failed);
                    }
                }

            }).catch(function (x) {
            }).fail(function (xhr) {
                if (xhr.status == 500) {
                    an.title = 'Oops';
                    an.content = 'Server error';
                    an.alert(an.type.failed);
                }
                if (xhr.status == 0) {
                    an.title = 'Oops';
                    an.content = 'Internet Connection was broken';
                    an.alert(an.type.failed);
                }
            }).always(function () {
                preloader.remove();
                try {
                    btnLdr.Stop($(sender));
                } catch (e) {

                }
            });
        }
    }
    //clar loan service lead
    function ClearLoanServiceLead() {
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"), email: $("#txtEmail"), pan: $("#txtPan"),
            LoanAmount: $("#txtAmount"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }
        ct.name.val("");
        ct.mob.val("");
        ct.email.val("");
        ct.pan.val("");
        ct.LoanAmount.val("0.00");
        ct.Comments.val("");
        $(".clsLoanType").prop("checked", false);
        $(".clsCustomerType").prop("checked", false);

    }

    //Save Insurance
    function SaveInsuranceServiceLead() {
        //debugger;
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"),
            Amount: $("#txtAmount"), Age: $("#txtAge"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }
        var len = 10, maxlength = 12;
        var validateMob = $v.$IsMob(ct.mob.val())
        var IsE = {
            name: ((ct.name.val() === null || ct.name.val() == "") || ct.name.val().length > 100 || $v.$numOnly(ct.name.val()) == ct.name.val()),
            mob: !validateMob

        }
        $v.showErrorFor(ct.name, "Customer Name is required or Please required valid Name", IsE.name);
        $v.showErrorFor(ct.mob, "Customer Mobile No. is required and length must be " + " " + len + " " + "digits", IsE.mob);

        IsE.err = (IsE.name || IsE.mob)
        if (IsE.err) {
            btnLdr.Stop(ct.btn);
            return false;
        }
        var InsuranceServiceObj = {
            Name: ct.name.val(),
            Mobile: ct.mob.val(),
            InsuranceTypeID: $(".clsInsuranceType:checked").val(),
            Amount: parseFloat(ct.Amount.val()),
            RequiredFor: $(".clsRequiredFor:checked").val(),
            Comments: ct.Comments.val(),
            OID: $("#OID").val(),
            Age: parseInt(ct.Age.val())
        }
        if (isNaN(InsuranceServiceObj.Amount)) {
            an.title = "failed",
                an.content = "Invalid Sum insured amount",
                an.alert(an.type.failed);
            return false;
        }
        if (isNaN(InsuranceServiceObj.Age)) {
            an.title = "failed",
                an.content = "Invalid Age",
                an.alert(an.type.failed);
            return false;
        }
        //console.log(LoanLeadServiceObj)
        if (InsuranceServiceObj != null) {
            preloader.load();
            var req = InsuranceServiceObj;
            $.ajax({
                type: "POST",
                url: "/SaveLeadService",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify(req),
                success: function (result) {

                    if (result.statuscode == 1) {
                        an.title = result.msg,
                            an.content = "Insurance Service Lead Saved Successfully",
                            an.alert(an.type.success);
                        ClearInsuranceServiceLead();
                    }
                    else {
                        an.title = "failed",
                            an.content = result.msg,
                            an.alert(an.type.failed);
                    }
                }

            }).catch(function (x) {
            }).fail(function (xhr) {
                if (xhr.status == 500) {
                    an.title = 'Oops';
                    an.content = 'Server error';
                    an.alert(an.type.failed);
                }
                if (xhr.status == 0) {
                    an.title = 'Oops';
                    an.content = 'Internet Connection was broken';
                    an.alert(an.type.failed);
                }
            }).always(function () {
                preloader.remove();
                try {
                    btnLdr.Stop($(sender));
                } catch (e) {

                }
            });
        }
    }
    // Clear Insurance ServiceLead
    function ClearInsuranceServiceLead() {
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"), age: $("#txtAge"),
            Amount: $("#txtAmount"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }
        ct.name.val("");
        ct.mob.val("");
        ct.Amount.val("0.00");
        ct.age.val("0");
        ct.Comments.val("");
        $(".clsInsuranceType").prop("checked", false);
        $(".clsRequiredFor:checked").prop("checked", false);
    }
    $('.clsActiveLoan').click(function () {
        $('.clsActiveLoan').each(function () {
            $(this).prop('checked', false);
        });
        $(this).prop('checked', true);
    });
    $('.clsCustomerType').click(function () {
        $('.clsCustomerType').each(function () {
            $(this).prop('checked', false);
        });
        $(this).prop('checked', true);
    });
    $('.clsLoanType').click(function () {
        $('.clsLoanType').each(function () {
            $(this).prop('checked', false);
        });
        $(this).prop('checked', true);
    });

    $('.clsInsuranceType').click(function () {
        $('.clsInsuranceType').each(function () {
            $(this).prop('checked', false);
        });
        $(this).prop('checked', true);
    });
    $('.clsRequiredFor').click(function () {
        $('.clsRequiredFor').each(function () {
            $(this).prop('checked', false);
        });
        $(this).prop('checked', true);
    });
    //Save Insurance
    function SaveCreditCardLead() {
        //debugger;
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"),
            Amount: $("#txtAmount"), Age: $("#txtAge"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }
        var len = 10, maxlength = 12;
        var validateMob = $v.$IsMob(ct.mob.val())
        var IsE = {
            name: ((ct.name.val() === null || ct.name.val() == "") || ct.name.val().length > 100 || $v.$numOnly(ct.name.val()) == ct.name.val()),
            mob: !validateMob

        }
        $v.showErrorFor(ct.name, "Customer Name is required or Please required valid Name", IsE.name);
        $v.showErrorFor(ct.mob, "Customer Mobile No. is required and length must be " + " " + len + " " + "digits", IsE.mob);

        IsE.err = (IsE.name || IsE.mob)
        if (IsE.err) {
            btnLdr.Stop(ct.btn);
            return false;
        }

        var CreditCardServiceObj = {
            Name: ct.name.val(),
            Mobile: ct.mob.val(),
            OccupationType: $("#ddlOccupationType option:selected").val(),
            Amount: parseFloat(ct.Amount.val()),
            PinCode: $("#txtPinCode").val(),
            Comments: ct.Comments.val(),
            OID: parseInt($("#OID").val()),
            Age: parseInt(ct.Age.val()),
            BankID: parseInt($("#ddlBank option:selected").val()),
            HaveLoan: parseInt($(".clsActiveLoan:checked").val())
        }
        if (isNaN(CreditCardServiceObj.Amount)) {
            an.title = "failed",
                an.content = "Invalid Monthly Income",
                an.alert(an.type.failed);
            return false;
        }
        if (isNaN(CreditCardServiceObj.Age)) {
            an.title = "failed",
                an.content = "Invalid Age",
                an.alert(an.type.failed);
            return false;
        }
        //console.log(LoanLeadServiceObj)
        if (CreditCardServiceObj != null) {
            preloader.load();
            var req = CreditCardServiceObj;
            $.ajax({
                type: "POST",
                url: "/SaveLeadService",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify(req),
                success: function (result) {

                    if (result.statuscode == 1) {
                        an.title = result.msg,
                            an.content = "Credit Card Lead Saved Successfully",
                            an.alert(an.type.success);
                        ClearCreditCardLead();
                    }
                    else {
                        an.title = "failed",
                            an.content = result.msg,
                            an.alert(an.type.failed);
                    }
                }

            }).catch(function (x) {
            }).fail(function (xhr) {
                if (xhr.status == 500) {
                    an.title = 'Oops';
                    an.content = 'Server error';
                    an.alert(an.type.failed);
                }
                if (xhr.status == 0) {
                    an.title = 'Oops';
                    an.content = 'Internet Connection was broken';
                    an.alert(an.type.failed);
                }
            }).always(function () {
                preloader.remove();
                try {
                    btnLdr.Stop($(sender));
                } catch (e) {

                }
            });
        }
    }
    // Clear Insurance ServiceLead
    function ClearCreditCardLead() {
        debugger;
        let ct = {
            name: $("#txtName"), mob: $("#txtMobileNo"), age: $("#txtAge"),
            Amount: $("#txtAmount"),
            Comments: $("#txtComments"), btn: $("#btnSubmit")
        }
        ct.name.val("");
        ct.mob.val("");
        ct.Amount.val("0.00");
        ct.age.val("0");
        ct.Comments.val("");
        $("#ddlBank").prop("selectedIndex", "0");
        $("#ddlOccupationType").prop("selectedIndex", "");
        $("#txtPinCode").val("")
        $("#chkActiveLoanNo").prop("checked", true);
        $("#chkActiveLoanYes").prop("checked", false);
    }
</script>
