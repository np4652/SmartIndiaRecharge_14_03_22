@{
    ViewData["Title"] = "Recharge API";
}
<div aria-label="breadcrumb" class="breadcrumb" id="page-header">
    <div class="container-fluid">
        <h5 class="float-left"><i class="fa fa-users"></i> @ViewData["Title"]</h5>
        <ol class="breadcrumb float-right">
            <li class="breadcrumb-item"><a href="javascript:void(0)">Home</a></li>
            <li class="breadcrumb-item">API Management</li>
            <li class="breadcrumb-item active">Recharge API</li>
        </ol>
    </div>
</div>
<div id="__p" class="main-temp-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card mt-4">
                    <div class="card-header bg-gradientorange text-white">
                        <i class="fas fa-link"></i> API List
                        <div class="float-right"><button id="btnNew" class="btn btn-default btn-sm">New</button></div>
                    </div>
                    <div class="card-body" style="">
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped table-responsive-sm">
                                <thead class="bg-tableth">
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Actions</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">In Switch</th>
                                        <th scope="col">APIUrl</th>
                                        <th scope="col">StatusCheckURL</th>
                                        <th scope="col">BalanceURL</th>
                                        <th scope="col">DisputeURL</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            preloader.load();
            an.autoClose = 5;
            $.post('/RechargeAPIs').
                done(function (result) {
                    $('#__p tbody').html(result);
                    $(".dropdown-toggle").dropdown();
                }).catch(function (err) {
                    an.title = 'Oops';
                    an.content = 'An error has been occured during request.Reload again!'
                    an.alert(an.type.failed);
                }).fail(function (xhr) {
                    if (xhr.status == 500) {
                        an.title = 'Oops';
                        an.content = 'Server error';
                        an.alert(an.type.failed);
                    }
                    if (xhr.status == 0) {
                        an.title = 'Oops';
                        an.content = 'Internet Connection was broken';
                        an.alert(an.type.failed);
                    }
                }).always(function () {
                    preloader.remove();
                    $('tr div.dropdown-menu a.dropdown-item').click(function () {
                        if ($.inArray($(this).text(), ['API Commission']) < 0) {
                            return true;
                        }
                        var apiid = 0;
                        apiid = $(this).closest('tr').data().itemId;
                        GetAPICom(apiid);
                    });

                    $('#btnNew,tr div.dropdown-menu a.dropdown-item').click(function () {
                        if ($.inArray($(this).text(), ['Edit', 'New']) < 0) {
                            return true;
                        }
                        preloader.load();
                        var id = 0;
                        if ($(this).text() === 'Edit') {
                            id = $(this).closest('tr').data().itemId;
                        }
                        $.post('/Recharge-API/' + id)
                            .done(function (result) {
                                resultReload(result);
                                mdlA.id = 'mymodel';
                                mdlA.content = result;
                                mdlA.options.backdrop = 'static';
                                mdlA.alert(mdlA.size.xxlargeM);
                                setTimeout(function () {
                                    $('#txtName').focus();
                                }, 500);
                                $('#ddlGroup').on('change', function () {
                                    GetAPIGroup($(this).val());
                                });
                                var allowedCtrlForPaste = ['txtURL', 'txtStsChkURL', 'txtBalURL', 'txtDisURL', 'txtFetchBill'];
                                var ct = { btnSaveAPI: $('#btnSaveAPI') }

                                $('button.close span,#mdlCancel').unbind().click(function () {
                                    mdlA.dispose();
                                });
                                $('[data-toggle="tooltip"]').tooltip();
                                var lastFocusCtrl = $('#txtName');
                                $('textarea,input').focus(function () {
                                    lastFocusCtrl = $(this);
                                });
                                $('span.cursor-pointer').click(function () {
                                    var cText = $(this).attr('data-original-title');
                                    copyToClipboard(cText);
                                    an.title = 'Copied';
                                    an.content = cText;
                                    an.alert(an.type.info);
                                    an.autoClose = 5;
                                    if ($.inArray(lastFocusCtrl.attr('id'), allowedCtrlForPaste) > -1 && lastFocusCtrl.val().indexOf(cText) < 0) {
                                        pasteAtControl(lastFocusCtrl, cText);
                                    }
                                });
                                ct.btnTxt = ct.btnSaveAPI.html();
                                ct.btnSaveAPI.click(function () {
                                    var ctrls = {
                                        tnam: $('#txtName'), apiType: $('#ddlApiType'), turl: $('#txtURL'), tstsurl: $('#txtStsChkURL'), tburl: $('#txtBalURL'), tdurl: $('#txtDisURL'), txtFetchBill: $('#txtFetchBill'), tsnam: $('#txtStatusName'), tsuc: $('#txtSuccess'), tfail: $('#txtFail'), tresnd: $('#txtResend'), tlive: $('#txtLiveID'), tvend: $('#txtVendorID'), txtOpDownCond: $('#txtOpDownCond'), chbOpDown: $('#chbOpDown'), dmeth: $('#ddlMethod'), dresp: $('#ddlResType'), trem: $('#txtRemark'), btnSaveAPI: $('#btnSaveAPI'), hid: $('#hid'), txtFixedOutletID: $('#txtFixedOutletID'), chbOutletRequired: $('#chbOutletRequired'), ddlSurType: $('#ddlSurType'), txtMsgKey: $('#txtMsgKey'), txtBillNoKey: $('#txtBillNoKey'), txtBillDateKey: $('#txtBillDateKey'), txtDueDateKey: $('#txtDueDateKey'), txtBillAmountKey: $('#txtBillAmountKey'), txtCustomerNameKey: $('#txtCustomerNameKey'), txtBalanceKey: $('#txtBalanceKey'), ddlGroup: $('#ddlGroup'), txtGroupName: $('#txtGroupName'), txtGroupCode: $('#txtGroupCode'), txtErrKey: $('#txtErrKey'), txtBillStatusKey: $('#txtBillStatusKey'), txtBillStatusValue: $('#txtBillStatusValue'), ddlContentType: $('#ddlContentType'), chbOutletManual: $('#chbOutletManual'), ddlMethodBill: $('#ddlMethodBill'), ddlMethodBill: $('#ddlMethodBill'), ddlResTypeBill: $('#ddlResTypeBill'),
                                    txtVenderMailKey: $('#txtVenderMailKey'),txtHandoutIDKey: $('#txtHandoutIDKey'),txtMobilenoKey: $('#txtMobilenoKey'),txtWhatsAppNoKey: $('#txtWhatsAppNoKey') ,txtPartneruserIDKey: $('#txtPartneruserIDKey') }
                                    if (ct.btnTxt !== ct.btnSaveAPI.html())
                                        return false;
                                    btnLdr.addClass = 'btn-dark';
                                    btnLdr.removeClass = 'btn-outline-dark';
                                    btnLdr.Start(ct.btnSaveAPI, id == 0 ? 'Saving' : 'Updating');

                                    var IsE = { nam: ($v.$IsNum(ctrls.tnam.val()) || ctrls.tnam.val().trim() == '' || ctrls.tnam.val().length > 50), url: ctrls.apiType.val() != 2 ? ($v.$IsNum(ctrls.turl.val()) || ctrls.turl.val().trim() == '') : false, stsnam: (ctrls.tsnam.val().trim() == ''), suc: (ctrls.tsuc.val().trim() == ''), fail: (ctrls.tfail.val().trim() == ''), live: (ctrls.tlive.val().trim() == ''), vendid: (ctrls.tvend.val().trim() == ''), txtGroupName: ctrls.txtGroupName.val().length > 50 || ctrls.txtGroupName.val().length == 0, txtGroupCode: ctrls.txtGroupCode.val().length > 5 || ctrls.txtGroupCode.val().length == 0, ddlMethodBill: ctrls.ddlMethodBill.val() == undefined, ddlResTypeBill: ctrls.ddlResTypeBill.val() == undefined }
                                    $v.showErrorFor(ctrls.tnam, 'API Name is non-numeric mandatory field and length should not more than 50', IsE.nam);
                                    $v.showErrorFor(ctrls.turl, 'Invalid Url', IsE.url);
                                    $v.showErrorFor(ctrls.tsnam, 'Status name is mandatory', IsE.stsnam);
                                    $v.showErrorFor(ctrls.tsuc, 'Success code is mandatory', IsE.suc);
                                    $v.showErrorFor(ctrls.tfail, 'Failed code is mandatory', IsE.fail);
                                    $v.showErrorFor(ctrls.tlive, 'Live ID is mandatory', IsE.live);
                                    $v.showErrorFor(ctrls.tvend, 'Vendor ID is mandatory', IsE.vendid);
                                    $v.showErrorFor(ctrls.txtGroupName, 'GroupName is mandatory and length should not more than 50', IsE.txtGroupName);
                                    $v.showErrorFor(ctrls.txtGroupCode, 'GroupCode is mandatory and length should not more than 5', IsE.txtGroupCode);
                                    $v.showErrorFor(ctrls.ddlMethodBill, 'MethodBill is mandatory', IsE.ddlMethodBill);
                                    $v.showErrorFor(ctrls.ddlResTypeBill, 'Response Type Bill is mandatory', IsE.ddlResTypeBill);
                                    IsE.err = IsE.nam || IsE.url || IsE.stsnam || IsE.suc || IsE.fail || IsE.live || IsE.vendid || IsE.txtGroupName || IsE.txtGroupCode || IsE.ddlMethodBill || IsE.ddlResTypeBill;
                                    if (IsE.err) {
                                        btnLdr.Stop(ct.btnSaveAPI);
                                        return false;
                                    }
                                    var GroupID = 0;
                                    GroupID = ctrls.ddlGroup.val().split('_')[0];
                                    var APIDetail = { APIType: ctrls.apiType.val(), Name: ctrls.tnam.val(), Url: ctrls.turl.val(), StatusCheckURL: ctrls.tstsurl.val(), BalanceURL: ctrls.tburl.val(), DisputeURL: ctrls.tdurl.val(), RequestMethod: ctrls.dmeth.val(), StatusName: ctrls.tsnam.val().trim(), SuccessCode: ctrls.tsuc.val().trim(), FailCode: ctrls.tfail.val().trim(), LiveID: ctrls.tlive.val().trim(), VendorID: ctrls.tvend.val().trim(), ResponseTypeID: ctrls.dresp.val(), Remark: ctrls.trem.val(), IsOpDownAllow: ctrls.chbOpDown.is(':checked'), ID: ctrls.hid.val(), IsOutletRequired: ctrls.chbOutletRequired.is(':checked'), FixedOutletID: ctrls.txtFixedOutletID.val(), FetchBillURL: ctrls.txtFetchBill.val(), SurchargeType: ctrls.ddlSurType.val(), MsgKey: ctrls.txtMsgKey.val(), BillNoKey: ctrls.txtBillNoKey.val(), BillDateKey: ctrls.txtBillDateKey.val(), DueDateKey: ctrls.txtDueDateKey.val(), BillAmountKey: ctrls.txtBillAmountKey.val(), CustomerNameKey: ctrls.txtCustomerNameKey.val(), ErrorCodeKey: ctrls.txtErrKey.val(), GroupID, GroupName: ctrls.txtGroupName.val(), GroupCode: ctrls.txtGroupCode.val(), BillStatusKey: ctrls.txtBillStatusKey.val(), BillStatusValue: ctrls.txtBillStatusValue.val(), ContentType: ctrls.ddlContentType.val(), IsOutletManual: ctrls.chbOutletManual.is(':checked'), BalanceKey: ctrls.txtBalanceKey.val(), BillReqMethod: ctrls.ddlMethodBill.val(), BillResTypeID: ctrls.ddlResTypeBill.val(), InSwitch: $('#chbInSwitch').length ? $('#chbInSwitch').is(':checked') : false, RefferenceKey: $('#txtRefferenceKey').val(), DFormatID: $('#ddldateFormat').val(), MaxLimitPerTransaction: $('#txtMaxLimitPerTransaction').val(), VenderMail: ctrls.txtVenderMailKey.val(), HandoutID: ctrls.txtHandoutIDKey.val(), Mobileno: ctrls.txtMobilenoKey.val(), WhatsAppNo: ctrls.txtWhatsAppNoKey.val(), PartnerUserID: ctrls.txtPartneruserIDKey.val(), ValidateURL: $('#txtValidateURL').val(), AdditionalInfoListKey: $('#txtAdditionalInfoListKey').val(), AdditionalInfoKey: $('#txtAdditionalInfoKey').val(), AdditionalInfoValue: $('#txtAdditionalInfoValue').val(), ValidationStatusKey: $('#txtValidationStatusKey').val(), ValidationStatusValue: $('#txtValidationStatusValue').val(), APIOutletIDMob: $('#txtAPIOutletIDMob').val(), GeoCodeAGT: $('#txtGeoCodeAGT').val(), GeoCodeMOB: $('#txtGeoCodeMOB').val(), GeoCodeINT: $('#txtGeoCodeINT').val(), HookTIDKey: $('#txtHookTIDKey').val(), HookStatusKey: $('#txtHookStatusKey').val(), HookVendorKey: $('#txtHookVendorKey').val(), HookLiveIDKey: $('#txtHookLiveIDKey').val(), HookBalanceKey: $('#txtHookBalanceKey').val(), HookSuccessCode: $('#txtHookSuccessCode').val(), HookFailCode: $('#txtHookFailCode').val(), HookMsgKey: $('#txtHookMsgKey').val(), HookResTypeID: $('#ddlHookResTypeID').val(), BillFetchAPICode: $('#txtBFAPICode').val(), FirstDelimiter: $('#txtFirstDelimiter').val(), SecondDelimiter: $('#txtSecondDelimiter').val(), HookFirstDelimiter: $('#txtHookFirstDelimiter').val(), HookSecondDelimiter: $('#txtHookSecondDelimiter').val() }
                                    an.autoClose = 5;
                                    $.ajax({
                                        type: 'POST',
                                        url: '/Recharge-API',
                                        dataType: 'json',
                                        contentType: 'application/json',
                                        data: JSON.stringify(APIDetail),
                                        success: function (result) {
                                            resultReload(result);
                                            if (result.statuscode == an.type.failed) {
                                                an.title = "Oops";
                                                an.content = result.msg;
                                                an.alert(result.statuscode);
                                            }
                                            else if (result.statuscode == an.type.success) {
                                                an.title = "Well done";
                                                an.content = result.msg;
                                                an.alert(result.statuscode);
                                                rel(2);
                                            }
                                        },
                                        statusCode: {
                                            500: function () {
                                                an.title = 'Oops';
                                                an.content = 'Server error';
                                                an.alert(an.type.failed);
                                            },
                                            0: function () {
                                                an.title = 'Oops';
                                                an.content = 'Internet Connection was broken';
                                                an.alert(an.type.failed);
                                            }
                                        },
                                        error: function (result) {
                                            checkError(result);
                                            an.title = 'Oops';
                                            an.content = 'An error occured!';
                                            an.alert(an.type.failed);
                                        },
                                        complete: function () {
                                            btnLdr.Stop(ct.btnSaveAPI);
                                        }
                                    });
                                });
                            }).catch(function (xhr, ex, message) {
                                an.title = 'Oops';
                                an.content = message;
                                an.alert(an.type.failed);
                                an.autoClose = 2;
                            }).fail(function (xhr) {
                                if (xhr.status == 500) {
                                    an.title = 'Oops';
                                    an.content = 'Server error';
                                    an.alert(an.type.failed);
                                }
                                if (xhr.status == 0) {
                                    an.title = 'Oops';
                                    an.content = 'Internet Connection was broken';
                                    an.alert(an.type.failed);
                                }
                            }).always(function () {
                                preloader.remove();
                            });
                    });
                });
        });
        var GetAPIGroup = function (id) {
            preloader.load();
            $.post('/API-Group/' + id)
                .done(function (result) {
                    resultReload(result);
                    $('#txtGroupName').val(result.groupName);
                    $('#txtGroupCode').val(result.groupCode);
                    $('#ddlMethod').val(result.requestMethod.length == 0 ? 'GET' : result.requestMethod);
                    $('#txtStatusName').val(result.statusName);
                    $('#txtResend').val(result.resendCode);
                    $('#txtFail').val(result.failCode);
                    $('#txtSuccess').val(result.successCode);
                    $('#txtOpDownCond').val(result.opDownCondition);
                    $('#txtErrKey').val(result.errorCodeKey);
                    $('#txtLiveID').val(result.liveID);
                    $('#txtVendorID').val(result.vendorID);
                    $('#ddlResType').val(result.responseTypeID == 0 ? 1 : result.responseTypeID);
                    $('#txtMsgKey').val(result.msgKey);
                    $('#txtBillNoKey').val(result.billNoKey);
                    $('#txtBillDateKey').val(result.billDateKey);
                    $('#txtDueDateKey').val(result.dueDateKey);
                    $('#txtBillAmountKey').val(result.billAmountKey);
                    $('#txtCustomerNameKey').val(result.customerNameKey);
                    $('#txtBalanceKey').val(result.balanceKey);
                    $('#txtAdditionalInfoListKey').val(result.additionalInfoListKey);
                    $('#txtAdditionalInfoKey').val(result.additionalInfoKey);
                    $('#txtAdditionalInfoValue').val(result.additionalInfoValue);
                })
                .catch(function (xhr, e, msg) {
                    an.title = 'Oops';
                    an.content = 'An error has been occured during request.Reload again!'
                    an.alert(an.type.failed);
                })
                .fail(function (xhr) {
                    if (xhr.status == 500) {
                        an.title = 'Oops';
                        an.content = 'Server error';
                        an.alert(an.type.failed);
                    }
                    if (xhr.status == 0) {
                        an.title = 'Oops';
                        an.content = 'Internet Connection was broken';
                        an.alert(an.type.failed);
                    }
                })
                .always(function () {
                    preloader.remove();
                });
        }
        var GetAPICom = function (apiid) {
            preloader.load();
            $.post('/api-com', { APIID: apiid })
                .done(function (result) {
                    resultReload(result);
                    mdlA.content = result;
                    mdlA.id = 'mymodalapicom';
                    mdlA.options.backdrop = 'static';
                    mdlA.alert(mdlA.size.large);
                    $('[data-toggle="tooltip"]').tooltip();
                    $('button.close span,#mdlCancel').unbind().click(function () {
                        mdlA.dispose();
                    });
                    GetAPIComm($('#ddlAPI').val());
                    $('#ddlAPI').unbind().change(function () {
                        if ($(this).val() == "0") {
                            return true;
                        }
                        GetAPIComm($(this).val());
                    });
                })
                .catch(function (xhr, e, msg) {
                    an.title = 'Oops';
                    an.content = 'An error has been occured during request.Reload again!'
                    an.alert(an.type.failed);
                })
                .fail(function (xhr) {
                    if (xhr.status == 500) {
                        an.title = 'Oops';
                        an.content = 'Server error';
                        an.alert(an.type.failed);
                    }
                    if (xhr.status == 0) {
                        an.title = 'Oops';
                        an.content = 'Internet Connection was broken';
                        an.alert(an.type.failed);
                    }
                })
                .always(function () {
                    preloader.remove();
                });
        }
        var GetAPIComm = function (apiid) {
            preloader.load();
            $.post('/api-comm', { APIID: apiid })
                .done(function (result) {
                    resultReload(result);
                    $('#tblAPIComm tbody').html(result);
                    $('[data-toggle="tooltip"]').tooltip();
                    $('button.close span,#mdlCancel').unbind().click(function () {
                        mdlA.dispose();
                    });
                    setTimeout(function () {
                        $('#txtSearch').focus();
                        $("#txtSearch").on("keyup", function () {
                            var value = $(this).val();
                            value = value != undefined ? value.toLowerCase() : value;
                            $('#tblAPIComm tbody tr').filter(function () {
                                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                            });
                        });
                        var optype = $('#hidType').val();
                        $('#hidType').remove();
                        $('#ddlOType').html(optype.split(',').join(''));
                        $('#ddlOType').unbind().change(function () {
                            var value = $(this).val();
                            value = value != undefined ? value : '';
                            $('#tblAPIComm tbody tr').filter(function () {
                                $(this).toggle($($(this).find('td')[0]).find('small').text().toLowerCase().indexOf(value.toLowerCase()) > -1)
                            });
                        });
                    }, 500);

                    $('.btn-toggle').click(function () {
                        $(this).find('.btn').toggleClass('active');
                        if ($(this).find('.btn-dark').length > 0) {
                            $(this).find('.btn').toggleClass('btn-dark');
                        }
                        if ($(this).find('.btn-outline-dark').length > 0) {
                            $(this).find('.btn').toggleClass('btn-outline-dark');
                        }
                    });
                    $('input[id^="txtComAmt"], div[id^="btnGroupComType"], div[id^="btnGroupAmtType"]').on('blur click', function () {
                        var IstxtComAmt = false;
                        if ($(this).is(':input[id^="txtComAmt"]')) {
                            IstxtComAmt = true;
                        }
                        var oId = $(this).closest('tr').data().itemId;
                        var apiID = $('#hid').val();
                        var hidcomm = $('[data-item-id="' + oId + '"] input[id^="hidComAmt"]').val();
                        var comm = $('[data-item-id="' + oId + '"] input[id^="txtComAmt"]').val();
                        var commType = $('[data-item-id="' + oId + '"] div[id^="btnGroupComType"] button.active').text();
                        var amtType = $('[data-item-id="' + oId + '"] div[id^="btnGroupAmtType"] button.active').text();
                        var dotLen = comm.split('.').length - 1;
                        var IsE = { comm: (comm.trim() == '' || isNaN(comm) || comm.indexOf(' ') > -1 || dotLen > 1 || dotLen === 0 && !$v.$IsNum(comm)) || (dotLen === 1 && (!$v.$IsNum(comm.split('.')[0]) || !$v.$IsNum(comm.split('.')[1]))) }
                        $v.showErrorFor($('[data-item-id="' + oId + '"] input[id^="txtComAmt"]'), 'Invalid amount.', IsE.comm);
                        IsE.err = IsE.comm;
                        if (IsE.err) {
                            return false;
                        }
                        if (parseFloat(comm) === parseFloat(hidcomm) && IstxtComAmt) {
                            return true;
                        }
                        var SlabCommission = { OID: parseInt(oId), SlabID: parseInt(apiID), Comm: parseFloat(comm), CommType: commType === 'SUR' ? 1 : 0, AmtType: amtType === 'FIX' ? 1 : 0 }
                        preloader.load();
                        $.ajax({
                            type: 'POST',
                            url: '/api-comm-update',
                            data: JSON.stringify(SlabCommission),
                            dataType: 'json',
                            contentType: 'application/json',
                            success: function (result) {
                                resultReload(result);
                                an.title = result.statuscode == an.type.success ? 'Success' : 'Oops';
                                an.content = result.msg;
                                an.alert(result.statuscode);
                                if (result.statuscode == an.type.success) {
                                    $('[data-item-id="' + oId + '"] [data-toggle="tooltip"]').attr('data-original-title', 'Last Modified: Just Now!');
                                    $('[data-item-id="' + oId + '"] input[id^="hidComAmt"]').val(comm);
                                }
                            },
                            statusCode: {
                                500: function () {
                                    an.title = 'Oops';
                                    an.content = 'Server error';
                                    an.alert(an.type.failed);
                                },
                                0: function () {
                                    an.title = 'Oops';
                                    an.content = 'Internet Connection was broken';
                                    an.alert(an.type.failed);
                                }
                            },
                            error: function (xhr, result) {
                                an.title = 'Oops';
                                an.content = 'An error occured!';
                                an.alert(an.type.failed);
                            },
                            complete: function () {
                                preloader.remove();
                            }
                        });
                    });
                })
                .catch(function (xhr, e, msg) {
                    an.title = 'Oops';
                    an.content = 'An error has been occured during request.Reload again!'
                    an.alert(an.type.failed);
                })
                .fail(function (xhr) {
                    if (xhr.status == 500) {
                        an.title = 'Oops';
                        an.content = 'Server error';
                        an.alert(an.type.failed);
                    }
                    if (xhr.status == 0) {
                        an.title = 'Oops';
                        an.content = 'Internet Connection was broken';
                        an.alert(an.type.failed);
                    }
                })
                .always(function () {
                    preloader.remove();
                });
        }

    </script>
}
