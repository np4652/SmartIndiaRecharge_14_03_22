@using RoundpayFinTech.AppCode.Configuration;
@using Fintech.AppCode.StaticModel
@model RoundpayFinTech.AppCode.Model.ProcModel.GetEditUser
@{
    SelectList items = null;
    if (Model.Roles != null)
    {
        items = new SelectList(Model.Roles, "ID", "Role");
    }
    SelectList itemsSlab = null;
    if (Model.Slabs != null)
    {
        itemsSlab = new SelectList(Model.Slabs, "ID", "Role");
    }
    ViewData["Title"] = "Edit FOS Section";
}
<div aria-label="breadcrumb" class="breadcrumb" id="page-header">
    <div class="container-fluid">
        <h5 class="float-left"><i class="fa fa-users"></i> @ViewData["Title"]</h5>
        <ol class="breadcrumb float-right">
            <li class="breadcrumb-item"><a href="javascript:void(0)">Home</a></li>
            <li class="breadcrumb-item">User Management</li>
            <li class="breadcrumb-item">UserList</li>
            <li class="breadcrumb-item active">EditFOS</li>
        </ol>
    </div>
</div>
<div id="alertmsg"></div>
<div class="main-temp-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card mt-4">
                    <div class="card-header bg-gradientorange text-white">
                        <i class="fas fa-link"></i> @ViewData["Title"]
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 ">
                                <div class="form-group">
                                    @Html.Label("txtName", "Name", new { @class = "lbl" })
                                    @Html.TextBox("txtName", Model.Name, new { @class = "form-control text-capitalize", @placeholder = "Enter Name", @aria_describedby = "nameHelp", @tabindex = 1 })
                                    <input id="hidId" value="@Model.UserID" type="hidden" />
                                    <small id="nameHelp" class="form-text text-muted d-none">Name is mandatory</small>
                                </div>
                                <div class="form-group">

                                    @Html.Label("txtMobile", "Mobile Number", new { @class = "lbl" })
                                    @Html.TextBox("txtMobile", Model.MobileNo, new { @class = "form-control", @placeholder = "Enter Mobile Number", @aria_describedby = "mobileHelp", @tabindex = 3 })
                                    <small id="mobileHelp" class="form-text text-muted d-none">Mobile Number is mandatory</small>
                                </div>
                                <div class="form-group">
                                    @Html.Label("txtEmail", "Email ID", new { @class = "lbl" })
                                    @Html.TextBox("txtEmail", Model.EmailID, new { @class = "form-control text-lowercase", @placeholder = "Enter Email ID", @aria_describedby = "emailHelp", @tabindex = 4 })
                                    <small id="emailHelp" class="form-text text-muted d-none">Name is mandatory</small>
                                </div>
                                <div class="form-group">
                                    @Html.Label("ddlRole", "Role", new { @class = "lbl" })
                                    @Html.TextBox("txtEmail", Model.Role, new { @class = "form-control text-lowercase", @placeholder = "Enter Email ID", @aria_describedby = "emailHelp", @tabindex = 4, @readonly="readonly" } )
                                    <small id="emailHelp" class="form-text text-muted d-none">Name is mandatory</small>
                                    @*<select id="ddlRole" asp-items="@items" asp-for="RoleID" aria-describedby="ddlRoleHelp" tabindex="14" class="custom-select custom-select-md mb3">
            <option selected value="">:: Choose Role ::</option>

        </select>*@
                                    <small id="ddlRoleHelp" class="form-text text-muted d-none"></small>
                                </div>

                                <div class="form-group">
                                    @Html.Label("txtCity", "City", new { @class = "lbl" })
                                    <label class="form-control" id="txtCity" aria_describedby="cityHelp">@Model.City</label>
                                    <small id="cityHelp" class="form-text text-muted d-none"></small>

                                </div>
                            </div>
                            <div class="col-md-5 ">
                                <div class="form-group">
                                    @Html.Label("txtOutletName", "Outlet Name", new { @class = "lbl" })
                                    @Html.TextBox("txtOutletName", Model.OutletName, new { @class = "form-control text-capitalize", @placeholder = "Enter Outlet Name", @aria_describedby = "outletnameHelp", @tabindex = 2 })
                                    <small id="outletnameHelp" class="form-text text-muted d-none">Outlet Name is mandatory</small>
                                </div>



                                <div class="form-group">
                                    @Html.Label("txtWhatsappNo", "Whatsapp Number", new { @class = "lbl" })
                                    @Html.TextBox("txtWhatsappNo", Model.WhatsAppNumber, new { @class = "form-control text-lowercase", @placeholder = "Enter Whatsapp Number", @aria_describedby = "txtWhatsappNoHelp", @tabindex = 4 })
                                    <small id="txtWhatsappNoHelp" class="form-text text-muted d-none">Whatsapp Number is mandatory</small>
                                </div>


                                @if (Model.LoginID == Model.UserID)
                                {
                                    <div class="form-group">
                                        @Html.Label("ddlSlab", "Slab", new { @class = "lbl" })
                                        <select id="ddlSlab" asp-items="@itemsSlab" asp-for="SlabID" aria-describedby="slabHelp" tabindex="14" class="custom-select custom-select-md mb3">
                                            <option selected value="0">:: Choose Slab ::</option>
                                        </select>
                                        <small id="slabHelp" class="form-text text-muted d-none">Slab is mandatory</small>
                                    </div>
                                }
                                <div class="form-group">
                                    @Html.Label("txtAddress", "Address", new { @class = "lbl" })
                                    @Html.TextBox("txtAddress", Model.Address, new { @class = "form-control", @placeholder = "Enter Address", @aria_describedby = "addressHelp", @tabindex = 5 })
                                    <small id="addressHelp" class="form-text text-muted d-none"></small>
                                </div>
                                <div class="form-group">
                                    @Html.Label("txtPinCode", "PinCode", new { @class = "lbl" })
                                    @Html.TextBox("txtPinCode", Model.Pincode, new { @class = "form-control", @placeholder = "Enter PinCode", @aria_describedby = "pinHelp", @tabindex = 9 })
                                    <small id="pinHelp" class="form-text text-muted d-none"></small>
                                </div>
                                <div class="form-group">
                                    @Html.Label("txtState", "State", new { @class = "lbl" })
                                    <label class="form-control" id="txtState" aria-describedby="StateHelp"></label>
                                    <input id="hddStateID" value="@Model.StateID" type="hidden" />
                                    <small id="StateHelp" class="form-text text-muted d-none"></small>
                                </div>
                            </div>
                            @*<div class="col-md-2 text-center">
                                <img class="rounded-circle mt-4" src="@Html.Raw(Model.ProfilePic==null ? "/images/avatar/defualt.png" : Model.ProfilePic)" />
                                @{
                                    var btnCls = "btn btn-danger";
                                    btnCls = Model.KYCStatus == KYCStatusType.REKYC ? "btn btn-secondary" : (Model.KYCStatus == KYCStatusType.APPLIED ? "btn btn-info" : (Model.KYCStatus == KYCStatusType.COMPLETED ? "btn btn-success" : btnCls));
                                }
                                <span class="@btnCls">@("KYC " + KYCStatusType.GetKYCStatus(Model.KYCStatus))</span>

                            </div>*@
                        </div>
                        <div class="row">
                            <div class="col-md-5">
                                @Html.Hidden("hidId", null, new { @class = "d-none" })
                                @if (Model.KYCStatus == 0 || Model.KYCStatus == KYCStatusType.INCOMPLETE || Model.KYCStatus == KYCStatusType.REJECTED || Model.KYCStatus == KYCStatusType.REKYC)
                                {
                                    <div class="form-group">
                                        <button type="button" class="btn btn-dark" id="btnCreate" tabindex="16"> Update</button>
                                     </div>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script src="~/lib/jquery/dist/moment.min.js"></script>
    <script src="~/lib/bootstrap/calendar/datepicker/js/bootstrap-datetimepicker.min.js"></script>
    <script src="/js/datepickerHelper.js"></script>
    <script>
        var ct = {
            nam: $('#txtName'), namo: $('#txtOutletName'), mob: $('#txtMobile'), eml: $('#txtEmail'), txtWhatsappNo: $('#txtWhatsappNo'), slb: $('#ddlSlab'), adrs: $('#txtAddress'), cty: $('#txtCity'), pcd: $('#txtPinCode'), UserID: $('#hidId'), btn: $('#btnCreate'), state: $('#hddStateID'),  ddlDMRModel: $('#ddlDMRModel'),  Wid: $('#hidWID_')
        };
        $(document).ready(function () {
            var pincode = $('#txtPinCode').val();
            if (pincode.length == 6) {
                pincoded(pincode);
            }
            $("#txtPinCode").change(function () {
                var pincode = $(this).val();
                if (pincode.length == 6) {
                    pincoded(pincode);
                }
            });

            if ($('#btnCreate').index() == -1 ) {
                $('input:checkbox').on('change', function () {
                    _switch(this);
                });
            }

            var $v = $validator;
            var eid = larr[larr.length - 1];
            if (!$v.$IsNum(eid)) {
                rel(0);
                return false;
            }
            var an = alertNormal;
            an.id = 'myalert';
            an.parent = $('#alertmsg');
            ct.btnTxt = ct.btn.html();
            ct.mob.on('change keyup blur', function () {
                if (!$v.$IsMob(ct.mob.val())) {
                    ct.mob.val($v.$numOnly(ct.mob.val()));
                }
            });

            ct.pcd.on('change keyup blur', function () {
                if (!$v.$IsNum(ct.pcd.val())) {
                    ct.pcd.val($v.$numOnly(ct.pcd.val()));
                }
            });
            ct.btn.click(function () {

                if (ct.btnTxt !== ct.btn.html())
                    return false;
                btnLdr.addClass = 'btn-dark';
                btnLdr.removeClass = 'btn-outline-dark';
                btnLdr.Start(ct.btn, 'Requesting');
                var IsE = { nam: ($v.$IsNum(ct.nam.val()) || ct.nam.val().trim() == '' || ct.nam.val().length > 100), namo: ($v.$IsNum(ct.namo.val()) || ct.namo.val().trim() == '' || ct.namo.val().length > 150), mob: (ct.mob.val().length !== 10 || !$v.$IsMob(ct.mob.val())), eml: (!$v.$IsEmail(ct.eml.val()) || ct.eml.val().length > 256), slb: (ct.slb.val() === null || ct.slb.prop('selectedIndex') < 1) }
                $v.showErrorFor(ct.nam, 'Name is non-numeric mandatory field and length is not more than 100', IsE.nam);
                $v.showErrorFor(ct.namo, 'Outletname is non-numeric mandatory field and length is not more than 150', IsE.namo);
                $v.showErrorFor(ct.mob, 'Mobile number is mandatory field and length should be 10', IsE.mob);
                $v.showErrorFor(ct.eml, 'Enter correct Email Id is mandatory field', IsE.eml);
                $v.showErrorFor(ct.slb, 'Slab is required, select slab from list! (<i>In case of list is empty add slab first</i>)', IsE.slb);
                IsE.err = (IsE.nam || IsE.namo || IsE.mob || IsE.eml || IsE.state);
                if (IsE.err) {
                    btnLdr.Stop(ct.btn);
                    return false;
                }
                if (ct.ddlDMRModel.val() != undefined) {
                    IsE.err = parseInt(ct.ddlDMRModel.val()) == 0;
                    $v.showErrorFor(ct.ddlDMRModel, "Choose DDLModel", IsE.err);
                    if (IsE.err) {
                        btnLdr.Stop(ct.btn);
                        return false;
                    }
                }
                var UserData = { Name: ct.nam.val(), OutletName: ct.namo.val(), MobileNo: ct.mob.val(), EmailID: ct.eml.val(), WhatsAppNumber:ct.txtWhatsappNo.val(), SlabID: ct.slb.val(),   Address: ct.adrs.val(), SlabID: ct.state.val(), Pincode: ct.pcd.val(), UserID: $('#hidId').val(),  DMRModelID: ct.ddlDMRModel.val(), WID: ct.Wid.val() }

                an.autoClose = 5;
                $.ajax({
                    type: 'POST',
                    url: '/EditFOS',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(UserData),
                    success: function (result) {
                        if (result.statuscode == an.type.failed) {
                            an.title = "Oops";
                            an.content = result.msg;
                            an.alert(result.statuscode);
                        }
                        else if (result.statuscode == an.type.success) {
                            an.title = "Well done";
                            an.content = result.msg;
                            an.alert(result.statuscode);
                        }
                    },
                    statusCode: {
                        500: function () {
                            an.title = 'Oops';
                            an.content = 'Server error';
                            an.alert(an.type.failed);
                        },
                        0: function () {
                            an.title = 'Oops';
                            an.content = 'Internet Connection was broken';
                            an.alert(an.type.failed);
                        }
                    },
                    error: function (xhr, result) {
                        an.title = "Oops";
                        an.content = result;
                        an.alert(an.type.failed);
                        if (result === 'parsererror') {
                            reload();
                        }
                    },
                    complete: function () {
                        btnLdr.Stop(ct.btn);
                    }
                });
            });
        });

        var pincoded = function (m) {
            preloader.load();
            $.post('/PinCodeDetail', { Pincode: m }, function (result) {
                if (result.statuscode == an.type.failed) {
                    an.title = "Oops! Error";
                    an.content = result.msg;
                    an.alert(result.statuscode);
                }
                else if (result.statuscode == an.type.success) {
                    $('#txtState').html(result.statename);
                    $('#hddStateID').val(result.stateID);
                    $('#txtCity').html(result.districtname);
                }

            }).catch(function () {
                console.clear();
            }).fail(function (xhr) {
                $(_this).attr('checked', Is == false);
                if (xhr.status == 500) {
                    an.title = 'Oops';
                    an.content = 'Server error';
                    an.alert(an.type.failed);
                }
                if (xhr.status == 0) {
                    an.title = 'Oops';
                    an.content = 'Internet Connection was broken';
                    an.alert(an.type.failed);
                }
            }).always(function () {
                preloader.remove();
            });
        }
        var _switch = function (sender) {
            var param = {
                UserID : @Model.UserID,
                DMRModelID: $('#ddlDMRModel').val(),
                WID: $('#hidWID_').val()
            };
            var _id = $(sender).attr('id');
        }

        var _partialUpdate = function (param) {
            $.post('/_partialUpdate', param = param)
                .done(function (result) {
                    an.title = result.statuscode == 1 ? 'Wow' : 'Oops';
                    an.content = result.msg;
                    an.alert(result.statuscode);
                });
        }




    </script>
}
